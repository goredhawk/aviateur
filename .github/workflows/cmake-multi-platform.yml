# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-24.04]
        build_type: [ Release ]
        c_compiler: [ gcc]
        include:
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "artifact-name=build-output-${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Install dependency libraries (Windows)
        id: vars
        if: runner.os == 'Windows'
        run: |
          git submodule update --init --recursive
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          .\vcpkg install libusb ffmpeg libsodium opencv
          echo ("VCPKG_ROOT=" + "$PWD") >> $env:GITHUB_ENV

      - name: Install dependency libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          git submodule update --init --recursive
          sudo apt install libusb-1.0-0-dev ffmpeg libsodium-dev libopencv-dev xorg-dev libpcap-dev
          sudo apt install gstreamer1.0-plugins-good gstreamer1.0-nice gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad libgstreamer-plugins-bad1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev glslang-tools libbsd-dev libgl1-mesa-dev libsystemd-dev libx11-dev libx11-xcb-dev libxxf86vm-dev pkg-config gstreamer1.0-libav libglib2.0-dev

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DAVIATEUR_ENABLE_GSTREAMER=OFF
          -DREVECTOR_VULKAN=OFF
          -S ${{ github.workspace }}

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DREVECTOR_VULKAN=OFF
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: List build artifacts
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Build artifacts:"
          find . -name "*.so" -o -name "*.a" -o -name "*.exe" -o -name "*.dll" -o -type f -executable | head -20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.artifact-name }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**
          retention-days: 30
